document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    const ROWS = 8;
    const COLS = 6;
    const WIN_LENGTH = 4; // –ù—É–∂–Ω–æ 4 –≤ —Ä—è–¥ –¥–ª—è –ø–æ–±–µ–¥—ã
    const BOMB_COUNT = 8;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –Ω–∞ –ø–æ–ª–µ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    const PLAYER = 'X';
    const BOT = 'O';
    const BOMB = 'üí£';
    const EMPTY = '';

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const boardElement = document.getElementById('game-board');
    const statusMessageElement = document.getElementById('status-message');
    const playerScoreElement = document.getElementById('player-score');
    const botScoreElement = document.getElementById('bot-score');
    const newGameButton = document.getElementById('new-game-button');

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
    let board = []; // 2D –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è
    let bombLocations = new Set(); // –•—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–æ–º–± ('row-col')
    let currentPlayer = PLAYER;
    let gameOver = false;
    let playerScore = 0;
    let botScore = 0;
    let isBotThinking = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –Ω–µ –∫–ª–∏–∫–∞–ª –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –±–æ—Ç–∞

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–≥—Ä—ã ---
    function initializeGame() {
        board = Array(ROWS).fill(null).map(() => Array(COLS).fill(EMPTY));
        bombLocations.clear();
        gameOver = false;
        isBotThinking = false;
        currentPlayer = PLAYER; // –ò–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–º

        placeBombs();
        renderBoard();
        updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
        updateScoreDisplay();
        newGameButton.disabled = true; // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        console.log("–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ë–æ–º–±—ã:", Array.from(bombLocations)); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    // --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–æ–º–± ---
    function placeBombs() {
        let bombsPlaced = 0;
        while (bombsPlaced < BOMB_COUNT) {
            const row = Math.floor(Math.random() * ROWS);
            const col = Math.floor(Math.random() * COLS);
            const key = `${row}-${col}`;
            if (!bombLocations.has(key)) {
                bombLocations.add(key);
                // –ù–µ —Å—Ç–∞–≤–∏–º –±–æ–º–±—É –≤ –º–∞—Å—Å–∏–≤ board —Å—Ä–∞–∑—É, –æ–Ω–∞ "—Å–∫—Ä—ã—Ç–∞"
                bombsPlaced++;
            }
        }
    }

    // --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ü–æ–ª—è ---
    function renderBoard() {
        boardElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        boardElement.style.gridTemplateColumns = `repeat(${COLS}, var(--cell-size))`;
        boardElement.style.gridAutoRows = `var(--cell-size)`;

        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = r;
                cell.dataset.col = c;

                const cellValue = board[r][c];
                if (cellValue === PLAYER) {
                    cell.classList.add('x');
                    cell.textContent = PLAYER;
                } else if (cellValue === BOT) {
                    cell.classList.add('o');
                    cell.textContent = BOT;
                }
                 // –ë–æ–º–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ –∫–ª–∏–∫–∞
                 // else if (bombLocations.has(`${r}-${c}`)) {
                 //    cell.textContent = '?'; // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–æ–º–±—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                 // }

                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                cell.removeEventListener('click', handleCellClick);
                cell.addEventListener('click', handleCellClick);

                boardElement.appendChild(cell);
            }
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–ª–∏–∫–∞ –ø–æ –Ø—á–µ–π–∫–µ ---
    function handleCellClick(event) {
        if (gameOver || isBotThinking || currentPlayer !== PLAYER) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–µ –≤ —Å–≤–æ–π —Ö–æ–¥ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–¥—É–º–∏–π –±–æ—Ç–∞

        const cell = event.target;
        const row = parseInt(cell.dataset.row);
        const col = parseInt(cell.dataset.col);
        const bombKey = `${row}-${col}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ–π (–∫—Ä–æ–º–µ —Å–∫—Ä—ã—Ç—ã—Ö –±–æ–º–±)
        if (board[row][col] !== EMPTY) return;

        if (bombLocations.has(bombKey)) {
            // –ò–≥—Ä–æ–∫ –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É!
            triggerBomb(row, col, PLAYER); // –ü–µ—Ä–µ–¥–∞–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É
             // –ë–æ–º–±–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –±–æ—Ç—É (–ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏)
             if (!gameOver) {
                 switchPlayer();
                 // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
                 setTimeout(botMove, 600);
             }

        } else {
            // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            makeMove(row, col, PLAYER);
        }
    }

     // --- –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –•–æ–¥–∞ (–±–µ–∑ –±–æ–º–±) ---
     function makeMove(row, col, player) {
        if (gameOver || board[row][col] !== EMPTY) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        board[row][col] = player;
        updateCell(row, col, player);

        const winInfo = checkWin(player);
        if (winInfo) {
            endGame(player, winInfo.winningCells);
        } else if (checkDraw()) {
            endGame('draw');
        } else {
            switchPlayer();
             // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –±–æ—Ç–∞
            if (player === PLAYER && !gameOver) {
                 isBotThinking = true;
                 updateStatusMessage('–ë–æ—Ç –¥—É–º–∞–µ—Ç...');
                 // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è "—Ä–∞–∑–¥—É–º–∏–π" –±–æ—Ç–∞
                 setTimeout(botMove, Math.random() * 500 + 300); // 300-800ms
             }
        }
        return true; // –•–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω
    }


    // --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ë–æ–º–±—ã ---
    function triggerBomb(row, col, triggerPlayer) {
        console.log(`–ë–æ–º–±–∞ –≤–∑–æ—Ä–≤–∞–Ω–∞ –≤ ${row}-${col} –∏–≥—Ä–æ–∫–æ–º ${triggerPlayer}`);
        const bombCell = getCellElement(row, col);
        if (bombCell) {
             bombCell.textContent = BOMB; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–º–±—É
             bombCell.classList.add('bomb-revealed', 'exploded');
             // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'exploded' –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                bombCell?.classList.remove('exploded');
                 // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –±–æ–º–±—ã –≤–∏–¥–∏–º–æ–π
                 // bombCell.textContent = ''; // –ò–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —è—á–µ–π–∫—É –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
            }, 500);
        }

        // –£–¥–∞–ª—è–µ–º –±–æ–º–±—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        bombLocations.delete(`${row}-${col}`);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –≤ EMPTY, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π
        // (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≤–∑–æ—Ä–≤–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏)
        board[row][col] = EMPTY;

        // –û—á–∏—â–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
        for (let rOffset = -1; rOffset <= 1; rOffset++) {
            for (let cOffset = -1; cOffset <= 1; cOffset++) {
                if (rOffset === 0 && cOffset === 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –±–æ–º–±—É

                const nr = row + rOffset;
                const nc = col + cOffset;

                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    // –ù–µ —Å—Ç–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –±–æ–º–±—ã –≤–∑—Ä—ã–≤–æ–º, —Ç–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä—ã X –∏ O
                    if (board[nr][nc] === PLAYER || board[nr][nc] === BOT) {
                         board[nr][nc] = EMPTY;
                         updateCell(nr, nc, EMPTY); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª –æ—á–∏—â–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
                         // –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—Å—Ç–∫–∏?
                         const clearedCell = getCellElement(nr, nc);
                         clearedCell?.classList.add('exploded'); // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
                         setTimeout(() => clearedCell?.classList.remove('exploded'), 500);
                    }
                    // –ï—Å–ª–∏ —Å–æ—Å–µ–¥–Ω—è—è —è—á–µ–π–∫–∞ - —Ç–æ–∂–µ –±–æ–º–±–∞, –æ–Ω–∞ –Ω–µ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è
                }
            }
        }

        updateStatusMessage(`üí• –ë—É–º! –ò–≥—Ä–æ–∫ ${triggerPlayer} –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É!`);
        // –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ handleCellClick –∏–ª–∏ botMove)
    }


    // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ ---
    function switchPlayer() {
         if (gameOver) return;
        currentPlayer = (currentPlayer === PLAYER) ? BOT : PLAYER;
        if (!isBotThinking) { // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –±–æ—Ç –µ—â–µ "–¥—É–º–∞–µ—Ç"
             updateStatusMessage(`–•–æ–¥ ${currentPlayer === PLAYER ? '–∏–≥—Ä–æ–∫–∞' : '–±–æ—Ç–∞'} (${currentPlayer})`);
        }
    }

    // --- –•–æ–¥ –ë–æ—Ç–∞ ---
    function botMove() {
         if (gameOver || currentPlayer !== BOT) {
             isBotThinking = false;
             return;
         }

         updateStatusMessage('–ë–æ—Ç —Ö–æ–¥–∏—Ç...');

         // --- –õ–æ–≥–∏–∫–∞ –ò–ò –ë–æ—Ç–∞ ---
         let bestMove = findBestMove();

         if (bestMove) {
             const { row, col } = bestMove;
             const bombKey = `${row}-${col}`;

             if (bombLocations.has(bombKey)) {
                 // –ë–æ—Ç –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É!
                 triggerBomb(row, col, BOT);
                 // –•–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫—É
                 if (!gameOver) {
                    switchPlayer(); // –í–µ—Ä–Ω—É–ª–∏ —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
                 }
             } else {
                 // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –±–æ—Ç–∞
                makeMove(row, col, BOT);
             }
         } else {
             // –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –Ω–µ—Ç (–Ω–∏—á—å—è —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞)
             console.error("–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ö–æ–¥!");
             if (!checkDraw()) { // –ï—Å–ª–∏ –Ω–µ –Ω–∏—á—å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                endGame('draw'); // –§–æ—Ä—Å–∏—Ä—É–µ–º –Ω–∏—á—å—é –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
             }
         }
         isBotThinking = false; // –ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
         // –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ switchPlayer –∏–ª–∏ endGame
         if (!gameOver && currentPlayer === PLAYER) {
             updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
         }
    }

    // --- –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –ë–æ—Ç–∞ (–£–º–Ω—ã–π, –Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) ---
    function findBestMove() {
        // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º
        let move = findWinningMove(BOT);
        if (move) return move;

        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        move = findWinningMove(PLAYER);
        if (move) return move;

        // 3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å —É–≥—Ä–æ–∑—É (3 –≤ —Ä—è–¥ —Å –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π)
        move = findThreatMove(BOT);
        if (move) return move;

        // 4. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–≥—Ä–æ–∑—É –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–±–µ–¥—ã)
        move = findThreatMove(PLAYER); // –ù–∞–π—Ç–∏ —É–≥—Ä–æ–∑—É –∏–≥—Ä–æ–∫–∞
        if (move) {
            // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É –±–æ—Ç–∞ –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–≥–æ —Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ–µ–π —É–≥—Ä–æ–∑—ã)
            let botThreat = findThreatMove(BOT, true); // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É
            if(!botThreat) return move; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç —Å–≤–æ–µ–π —É–≥—Ä–æ–∑—ã
        }


        // 5. –ó–∞–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∫–ª–µ—Ç–∫—É (–±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∏–ª–∏ —Å–≤–æ–∏–º —Ñ–∏–≥—É—Ä–∞–º)
        //    –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—É—é –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É (–Ω–µ –±–æ–º–±—É!)
        let possibleMoves = [];
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === EMPTY && !bombLocations.has(`${r}-${c}`)) {
                    possibleMoves.push({ row: r, col: c, score: calculateStrategicScore(r, c) });
                }
            }
        }

         // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –±–æ–º–±—ã - –±–æ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –æ–¥–Ω—É
         if (possibleMoves.length === 0) {
             let bombCells = [];
             for (let r = 0; r < ROWS; r++) {
                 for (let c = 0; c < COLS; c++) {
                      if (board[r][c] === EMPTY && bombLocations.has(`${r}-${c}`)) {
                          bombCells.push({ row: r, col: c });
                      }
                 }
             }
             if (bombCells.length > 0) {
                 // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±–æ–º–±—É
                 return bombCells[Math.floor(Math.random() * bombCells.length)];
             } else {
                 return null; // –í–æ–æ–±—â–µ –Ω–µ—Ç —Ö–æ–¥–æ–≤ - –Ω–∏—á—å—è?
             }
         }


        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–µ (–≤—ã—à–µ - –ª—É—á—à–µ)
        possibleMoves.sort((a, b) => b.score - a.score);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–ª –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
        // –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤
        const topMoves = possibleMoves.slice(0, Math.min(possibleMoves.length, 3)); // –ë–µ—Ä–µ–º –¥–æ 3 –ª—É—á—à–∏—Ö
        return topMoves[Math.floor(Math.random() * topMoves.length)];
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ/–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ö–æ–¥–∞ ---
    function findWinningMove(player) {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === EMPTY && !bombLocations.has(`${r}-${c}`)) {
                    board[r][c] = player; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
                    if (checkWin(player)) {
                        board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                        return { row: r, col: c };
                    }
                    board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                }
            }
        }
        return null; // –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Ö–æ–¥–∞
    }

     // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–æ–¥–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ —É–≥—Ä–æ–∑—É (3 –≤ —Ä—è–¥) ---
     function findThreatMove(player, onlyExisting = false) {
         for (let r = 0; r < ROWS; r++) {
             for (let c = 0; c < COLS; c++) {
                  // –ò—â–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É, –Ω–µ –±–æ–º–±—É
                 if (board[r][c] === EMPTY && !bombLocations.has(`${r}-${c}`)) {
                     board[r][c] = player; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥ –ª–∏–Ω–∏—é –∏–∑ 3-—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ 4-—Ö
                     if (createsPotentialWin(r, c, player)) {
                         board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                         return { row: r, col: c };
                     }
                     board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                 }
                 // –ï—Å–ª–∏ –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–≥—É—Ä—ã
                 else if (onlyExisting && board[r][c] === player){
                     if (createsPotentialWin(r, c, player, true)) {
                         // –ù–∞—à–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É. –í–µ—Ä–Ω–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–≥—É—Ä—ã, —Å–æ–∑–¥–∞—é—â–µ–π –µ–µ
                         // (—Ö–æ—Ç—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–∞ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ —Ä—è–¥–æ–º)
                         // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–≥—Ä–æ–∑—ã
                         // –ü—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å findWinningMove –¥–ª—è –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫—É–¥–∞ —Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫
                     }
                 }
             }
         }
         return null;
     }

     // --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ (r, c) –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –ø–æ–±–µ–¥—ã ---
     function createsPotentialWin(r, c, player, checkExisting = false) {
         const directions = [
             { dr: 0, dc: 1 }, { dr: 1, dc: 0 }, { dr: 1, dc: 1 }, { dr: 1, dc: -1 }
         ];

         for (const { dr, dc } of directions) {
             let count = 1;
             let openEnds = 0;

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
             for (let i = 1; i < WIN_LENGTH; i++) {
                 const nr = r + i * dr;
                 const nc = c + i * dc;
                 if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === player) {
                     count++;
                 } else if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === EMPTY && !bombLocations.has(`${nr}-${nc}`)) {
                     openEnds++;
                     break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ü–∞
                 } else {
                     break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞
                 }
             }

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
             for (let i = 1; i < WIN_LENGTH; i++) {
                 const nr = r - i * dr;
                 const nc = c - i * dc;
                 if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === player) {
                     count++;
                 } else if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === EMPTY && !bombLocations.has(`${nr}-${nc}`)) {
                      openEnds++;
                      break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ü–∞
                 } else {
                     break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞
                 }
             }

             // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ª–∏–Ω–∏—è –∏–∑ WIN_LENGTH - 1 —Ñ–∏–≥—É—Ä –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–µ—Ü
             if (count === WIN_LENGTH - 1 && openEnds >= 1) {
                 return true; // –ù–∞—à–ª–∏ —É–≥—Ä–æ–∑—É (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–±–µ–¥—É)
             }
         }
         return false;
     }


    // --- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ ---
    function calculateStrategicScore(r, c) {
        let score = 0;
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º (–Ω–µ–º–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
        const centerR = Math.floor(ROWS / 2);
        const centerC = Math.floor(COLS / 2);
        score -= Math.abs(r - centerR) + Math.abs(c - centerC); // –ß–µ–º –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É, —Ç–µ–º –º–µ–Ω—å—à–µ —à—Ç—Ä–∞—Ñ

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–æ —Å–æ —Å–≤–æ–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
        for (let dr = -1; dr <= 1; dr++) {
            for (let dc = -1; dc <= 1; dc++) {
                if (dr === 0 && dc === 0) continue;
                const nr = r + dr;
                const nc = c + dc;
                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    if (board[nr][nc] === BOT) score += 2; // –ë–æ–Ω—É—Å –∑–∞ —Å–æ—Å–µ–¥–∞-–±–æ—Ç–∞
                    // –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–æ —Å –∏–≥—Ä–æ–∫–æ–º (–º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ, —á–µ–º —Å–≤–æ—è —Ñ–∏–≥—É—Ä–∞)
                    // else if (board[nr][nc] === PLAYER) score -= 1;
                }
            }
        }
        return score;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª—è ---
    function checkWin(player) {
        const directions = [
            { dr: 0, dc: 1 }, // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
            { dr: 1, dc: 0 }, // –í–µ—Ä—Ç–∏–∫–∞–ª—å
            { dr: 1, dc: 1 }, // –î–∏–∞–≥–æ–Ω–∞–ª—å \
            { dr: 1, dc: -1 } // –î–∏–∞–≥–æ–Ω–∞–ª—å /
        ];

        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === player) {
                    for (const { dr, dc } of directions) {
                        const winningCells = [{ row: r, col: c }];
                        let count = 1;
                        for (let i = 1; i < WIN_LENGTH; i++) {
                            const nr = r + i * dr;
                            const nc = c + i * dc;
                            if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === player) {
                                winningCells.push({ row: nr, col: nc });
                                count++;
                            } else {
                                break; // –ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                            }
                        }
                        if (count === WIN_LENGTH) {
                             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ –ª–∏–Ω–∏—è –¥–∞–ª—å—à–µ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ 4)
                            // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –¥–µ–ª–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–æ—á–Ω–µ–µ
                            // if (winningCells.length > WIN_LENGTH) {
                            //    winningCells = winningCells.slice(0, WIN_LENGTH);
                            // }
                            return { winner: player, winningCells: winningCells };
                        }
                    }
                }
            }
        }
        return null; // –ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–∏—á—å–µ–π ---
    function checkDraw() {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –±–æ–º–±–∞, –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                if (board[r][c] === EMPTY && !bombLocations.has(`${r}-${c}`)) {
                    return false;
                }
            }
        }
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –≤—Å–µ –Ω–µ-–±–æ–º–±–æ–≤—ã–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã, –∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª
        return true;
    }

    // --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ò–≥—Ä—ã ---
    function endGame(winner, winningCells = []) {
        gameOver = true;
        isBotThinking = false; // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—ã–µ "—Ä–∞–∑–¥—É–º—å—è"

        if (winner === 'draw') {
            updateStatusMessage('–ù–∏—á—å—è!');
        } else if (winner === PLAYER || winner === BOT) {
            updateStatusMessage(`–ü–æ–±–µ–¥–∏–ª ${winner === PLAYER ? '–ò–≥—Ä–æ–∫' : '–ë–æ—Ç'} (${winner})!`);
            if (winner === PLAYER) playerScore++;
            else botScore++;
            updateScoreDisplay();
            highlightWin(winningCells);
        }

        newGameButton.disabled = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
    }

    // --- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –í—ã–∏–≥—Ä—ã—à–Ω–æ–π –õ–∏–Ω–∏–∏ ---
    function highlightWin(cells) {
        cells.forEach(({ row, col }) => {
            const cellElement = getCellElement(row, col);
            cellElement?.classList.add('win-cell');
        });
    }

     // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–∏–¥–∞ –Ø—á–µ–π–∫–∏ ---
     function updateCell(row, col, value) {
         const cellElement = getCellElement(row, col);
         if (cellElement) {
             cellElement.classList.remove('x', 'o', 'bomb-revealed', 'win-cell'); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
             cellElement.textContent = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

             if (value === PLAYER) {
                 cellElement.classList.add('x');
                 cellElement.textContent = PLAYER;
             } else if (value === BOT) {
                 cellElement.classList.add('o');
                 cellElement.textContent = BOT;
             } else if (value === EMPTY) {
                 // –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π
             }
             // –ë–æ–º–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
         }
     }

    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ —è—á–µ–π–∫–∏ ---
    function getCellElement(row, col) {
        return boardElement.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    }


    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—Ç–∞—Ç—É—Å–∞ ---
    function updateStatusMessage(message) {
        statusMessageElement.textContent = message;
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—á–µ—Ç–∞ ---
    function updateScoreDisplay() {
        playerScoreElement.textContent = playerScore;
        botScoreElement.textContent = botScore;
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª—å –ö–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ò–≥—Ä–∞" ---
    newGameButton.addEventListener('click', initializeGame);

    // --- –ü–µ—Ä–≤—ã–π –ó–∞–ø—É—Å–∫ ---
    initializeGame();

    // --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram ---
    // if (window.Telegram && window.Telegram.WebApp) {
    //     window.Telegram.WebApp.ready();
    //     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram UI
    //     // window.Telegram.WebApp.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É").show().onClick(() => window.Telegram.WebApp.close());
    // }
});
