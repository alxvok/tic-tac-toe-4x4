document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    const ROWS = 8;
    const COLS = 6;
    const WIN_LENGTH = 4;
    const BOMB_COUNT = 8;
    const PLAYER = 'X';
    const BOT = 'O';
    const BOMB = 'üí£';
    const EMPTY = '';

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const boardElement = document.getElementById('game-board');
    const statusMessageElement = document.getElementById('status-message');
    const playerScoreElement = document.getElementById('player-score');
    const botScoreElement = document.getElementById('bot-score');
    const newGameButton = document.getElementById('new-game-button');

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
    let board = [];
    let bombLocations = new Set();
    let currentPlayer = PLAYER;
    let gameOver = false;
    let playerScore = 0;
    let botScore = 0;
    let isBotThinking = false; // –ö–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–∫–æ–≤

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–≥—Ä—ã ---
    function initializeGame() {
        if (!boardElement || !statusMessageElement || !playerScoreElement || !botScoreElement || !newGameButton) {
            console.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã!");
            return;
        }

        board = Array(ROWS).fill(null).map(() => Array(COLS).fill(EMPTY));
        bombLocations.clear();
        gameOver = false;
        isBotThinking = false;
        currentPlayer = PLAYER;

        placeBombs();
        renderBoard();
        // –ö–ª–∞—Å—Å 'thinking' –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º
        updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
        updateScoreDisplay();
        newGameButton.disabled = true;
        console.log("–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (8x6). –ë–æ–º–±—ã:", Array.from(bombLocations));
    }

    // --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–æ–º–± ---
    function placeBombs() {
        let bombsPlaced = 0;
        if (BOMB_COUNT >= ROWS * COLS) {
            console.warn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ!");
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            const maxBombs = ROWS * COLS -1;
             while (bombsPlaced < maxBombs) {
                 const row = Math.floor(Math.random() * ROWS);
                 const col = Math.floor(Math.random() * COLS);
                 const key = `${row}-${col}`;
                 if (!bombLocations.has(key)) {
                     bombLocations.add(key);
                     bombsPlaced++;
                 }
             }
            return;
        }

        while (bombsPlaced < BOMB_COUNT) {
            const row = Math.floor(Math.random() * ROWS);
            const col = Math.floor(Math.random() * COLS);
            const key = `${row}-${col}`;
            if (!bombLocations.has(key)) {
                bombLocations.add(key);
                bombsPlaced++;
            }
        }
    }

    // --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ü–æ–ª—è ---
    function renderBoard() {
        boardElement.innerHTML = '';
        boardElement.style.gridTemplateColumns = `repeat(${COLS}, var(--cell-size))`;

        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = r;
                cell.dataset.col = c;

                const cellValue = board[r][c];
                if (cellValue === PLAYER) {
                    cell.classList.add('x');
                    cell.textContent = PLAYER;
                } else if (cellValue === BOT) {
                    cell.classList.add('o');
                    cell.textContent = BOT;
                }

                cell.addEventListener('click', handleCellClick);
                boardElement.appendChild(cell);
            }
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–ª–∏–∫–∞ –ø–æ –Ø—á–µ–π–∫–µ ---
    function handleCellClick(event) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫, –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Ö–æ–¥–∏—Ç –±–æ—Ç (isBotThinking=true) –∏–ª–∏ –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        if (gameOver || isBotThinking || currentPlayer !== PLAYER) return;

        const cell = event.target;
        if (!cell.classList.contains('cell')) return;

        const row = parseInt(cell.dataset.row);
        const col = parseInt(cell.dataset.col);

        if (isNaN(row) || isNaN(col) || row < 0 || row >= ROWS || col < 0 || col >= COLS) return;

        const bombKey = `${row}-${col}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞ (—Ñ–∏–≥—É—Ä—ã –Ω–µ—Ç)
        // –∏ —á—Ç–æ —ç—Ç–æ –Ω–µ —É–∂–µ –≤–∑–æ—Ä–≤–∞–Ω–Ω–∞—è –±–æ–º–±–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if (board[row][col] !== EMPTY || cell.classList.contains('bomb-revealed')) return;


        if (bombLocations.has(bombKey)) {
            triggerBomb(row, col, PLAYER);
             if (!gameOver) {
                 // –°—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                 switchPlayer();
                 isBotThinking = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
                 updateStatusMessage('–ë–æ—Ç –¥—É–º–∞–µ—Ç...'); // –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–¥—É–º–∏–π
                 setTimeout(botMove, 600); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ö–æ–¥–æ–º
             }
        } else {
            // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            makeMove(row, col, PLAYER);
            // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ makeMove, –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        }
    }

     // --- –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –•–æ–¥–∞ (–±–µ–∑ –±–æ–º–±) ---
     function makeMove(row, col, player) {
        // –ö–ª–∞—Å—Å 'thinking' –ù–ï —Ç—Ä–æ–≥–∞–µ–º
        if (gameOver || board[row][col] !== EMPTY) return false;

        board[row][col] = player;
        updateCell(row, col, player);

        const winInfo = checkWin(player);
        if (winInfo) {
            endGame(player, winInfo.winningCells);
        } else if (checkDraw()) {
            endGame('draw');
        } else {
            switchPlayer();
            if (player === PLAYER && !gameOver) { // –•–æ–¥ –∏–≥—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                 isBotThinking = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
                 updateStatusMessage('–ë–æ—Ç –¥—É–º–∞–µ—Ç...');
                 // boardElement?.classList.add('thinking'); // <<< –£–î–ê–õ–ï–ù–û
                 setTimeout(botMove, Math.random() * 500 + 300);
             } else if (player === BOT && !gameOver) { // –•–æ–¥ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω
                 // isBotThinking —É–∂–µ –±—É–¥–µ—Ç false (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ botMove)
                 updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
             }
        }
        return true;
    }


    // --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ë–æ–º–±—ã ---
    function triggerBomb(row, col, triggerPlayer) {
        console.log(`–ë–æ–º–±–∞ –≤–∑–æ—Ä–≤–∞–Ω–∞ –≤ ${row}-${col} –∏–≥—Ä–æ–∫–æ–º ${triggerPlayer}`);
        const bombCell = getCellElement(row, col);
        if (bombCell) {
             bombCell.textContent = BOMB;
             bombCell.classList.add('bomb-revealed'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º
             bombCell.classList.add('exploded'); // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
            setTimeout(() => {
                bombCell?.classList.remove('exploded'); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            }, 600); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        }

        bombLocations.delete(`${row}-${col}`); // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        board[row][col] = EMPTY; // –ö–ª–µ—Ç–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—É—Å—Ç–æ–π (–Ω–æ –≤–∏–∑—É–∞–ª—å–Ω–æ –∑–∞–Ω—è—Ç–∞ –±–æ–º–±–æ–π)

        // –û—á–∏—â–∞–µ–º —Å–æ—Å–µ–¥–µ–π
        for (let rOffset = -1; rOffset <= 1; rOffset++) {
            for (let cOffset = -1; cOffset <= 1; cOffset++) {
                if (rOffset === 0 && cOffset === 0) continue;
                const nr = row + rOffset;
                const nc = col + cOffset;

                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    const neighborKey = `${nr}-${nc}`;
                    // –°—Ç–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ X –∏ O
                    if (board[nr][nc] === PLAYER || board[nr][nc] === BOT) {
                         board[nr][nc] = EMPTY;
                         updateCell(nr, nc, EMPTY);
                         const clearedCell = getCellElement(nr, nc);
                         clearedCell?.classList.add('exploded'); // –ê–Ω–∏–º–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
                         setTimeout(() => clearedCell?.classList.remove('exploded'), 600);
                    }
                }
            }
        }
        // –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ triggerBomb (–≤ handleCellClick –∏–ª–∏ botMove)
        // updateStatusMessage(`üí• –ë—É–º! ...`); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    }


    // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ ---
    function switchPlayer() {
         if (gameOver) return;
        currentPlayer = (currentPlayer === PLAYER) ? BOT : PLAYER;
    }

    // --- –•–æ–¥ –ë–æ—Ç–∞ ---
    function botMove() {
        if (gameOver || currentPlayer !== BOT) {
            isBotThinking = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —Ö–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω
            // boardElement?.classList.remove('thinking'); // <<< –£–î–ê–õ–ï–ù–û
            return;
        }

        // boardElement?.classList.add('thinking'); // <<< –£–î–ê–õ–ï–ù–û (–Ω–æ isBotThinking –≤—Å–µ –µ—â–µ true)
        updateStatusMessage('–ë–æ—Ç —Ö–æ–¥–∏—Ç...'); // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å "–¥—É–º–∞–µ—Ç" –Ω–∞ "—Ö–æ–¥–∏—Ç"

        let bestMove = findBestMove();

        if (bestMove) {
            const { row, col } = bestMove;
            const bombKey = `${row}-${col}`;

            // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º –Ω–∞ –ø–æ–ª–µ
            setTimeout(() => {
                 if (gameOver) { // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏
                     isBotThinking = false;
                     return;
                 }

                if (bombLocations.has(bombKey)) {
                    triggerBomb(row, col, BOT);
                    if (!gameOver) {
                        switchPlayer(); // –•–æ–¥ –ø–µ—Ä–µ—à–µ–ª –∏–≥—Ä–æ–∫—É
                        isBotThinking = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
                        updateStatusMessage(`üí• –ë—É–º! –ë–æ—Ç –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É! ${`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`}`);
                    } else {
                         isBotThinking = false; // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                    }
                } else {
                    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –±–æ—Ç–∞
                    const moveMade = makeMove(row, col, BOT);
                    // –§–ª–∞–≥ isBotThinking –±—É–¥–µ—Ç —Å–Ω—è—Ç *—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏* —Ö–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω
                    // –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å (—ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ makeMove)
                    if(moveMade && !gameOver){
                         isBotThinking = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞
                         // –°—Ç–∞—Ç—É—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ makeMove
                    } else if (!moveMade) {
                        // –ï—Å–ª–∏ —Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                        isBotThinking = false;
                        updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
                        console.error("–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥");
                    } else { // gameOver == true
                         isBotThinking = false;
                    }
                }
                 // boardElement?.classList.remove('thinking'); // <<< –£–î–ê–õ–ï–ù–û
            }, 150); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ (150–º—Å) –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ö–æ–¥–∞ –±–æ—Ç–∞

        } else {
            console.error("–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ö–æ–¥!");
            isBotThinking = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            // boardElement?.classList.remove('thinking'); // <<< –£–î–ê–õ–ï–ù–û
            if (!checkDraw() && !gameOver) {
               endGame('draw');
            } else if (!gameOver) {
                // –ï—Å–ª–∏ checkDraw –≤–µ—Ä–Ω—É–ª true, –Ω–æ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ–±—ä—è–≤–ª—è–µ–º –Ω–∏—á—å—é
                endGame('draw');
            }
        }
    }


    // --- –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –ë–æ—Ç–∞ (–õ–æ–≥–∏–∫–∞ –ò–ò –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ) ---
    function findBestMove() {
        // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º
        let move = findWinningMove(BOT);
        if (move) return move;

        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        move = findWinningMove(PLAYER);
        if (move) return move;

        // 3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å —É–≥—Ä–æ–∑—É (WIN_LENGTH - 1 –≤ —Ä—è–¥)
        move = findThreatMove(BOT);
        if (move) return move;

        // 4. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–≥—Ä–æ–∑—É –∏–≥—Ä–æ–∫–∞
        let playerThreat = findThreatMove(PLAYER);
        if (playerThreat) {
             let botOwnThreat = findThreatMove(BOT, true); // –ò—â–µ–º —Å–≤–æ—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É
             if(!botOwnThreat) return playerThreat; // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–æ–≤
        }

        // 5. –ó–∞–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é
        let possibleMoves = [];
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const key = `${r}-${c}`;
                const cellElem = getCellElement(r, c);
                // –ò—â–µ–º –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, –Ω–µ —Å–∫—Ä—ã—Ç—É—é –∏ –Ω–µ –≤–∑–æ—Ä–≤–∞–Ω–Ω—É—é –±–æ–º–±—É
                if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                     possibleMoves.push({ row: r, col: c, score: calculateStrategicScore(r, c) });
                }
            }
        }

         if (possibleMoves.length === 0) {
             // –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ö–æ–¥–æ–≤ –Ω–µ—Ç, –∏—â–µ–º –±–æ–º–±—É –¥–ª—è —Ö–æ–¥–∞
             let bombCells = [];
             for(const key of bombLocations) {
                 const [r_str, c_str] = key.split('-');
                 const r = parseInt(r_str);
                 const c = parseInt(c_str);
                 if(board[r][c] === EMPTY) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–º –Ω–µ X –∏–ª–∏ O –ø–æ –æ—à–∏–±–∫–µ
                    bombCells.push({ row: r, col: c });
                 }
             }
             if (bombCells.length > 0) {
                 console.log("–ë–æ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –±–æ–º–±—É.");
                 return bombCells[Math.floor(Math.random() * bombCells.length)];
             } else {
                 console.error("–ù–µ—Ç –Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ö–æ–¥–æ–≤, –Ω–∏ –±–æ–º–±. –ù–∏—á—å—è?");
                 return null;
             }
         }

        possibleMoves.sort((a, b) => b.score - a.score);
        const topN = Math.min(possibleMoves.length, 3);
        const randomIndex = Math.floor(Math.random() * topN);
        return possibleMoves[randomIndex];
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ/–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ö–æ–¥–∞ ---
    function findWinningMove(player) {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                 const key = `${r}-${c}`;
                 const cellElem = getCellElement(r, c);
                 if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                    board[r][c] = player;
                    if (checkWin(player)) {
                        board[r][c] = EMPTY;
                        return { row: r, col: c };
                    }
                    board[r][c] = EMPTY;
                }
            }
        }
        return null;
    }

     // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–æ–¥–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ —É–≥—Ä–æ–∑—É ---
     function findThreatMove(player, onlyExisting = false) {
        let bestThreatMove = null;
        let maxOwnPieces = -1;

         for (let r = 0; r < ROWS; r++) {
             for (let c = 0; c < COLS; c++) {
                  const key = `${r}-${c}`;
                  const cellElem = getCellElement(r, c);

                 if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                     if (onlyExisting) continue;
                     board[r][c] = player;
                     const potentialWinInfo = createsPotentialWin(r, c, player);
                     if (potentialWinInfo && potentialWinInfo.count > maxOwnPieces) {
                         maxOwnPieces = potentialWinInfo.count;
                         bestThreatMove = { row: r, col: c };
                     }
                     board[r][c] = EMPTY;
                 }
                 else if (onlyExisting && board[r][c] === player) {
                     const potentialWinInfo = createsPotentialWin(r, c, player, true);
                     if (potentialWinInfo && potentialWinInfo.count > maxOwnPieces) {
                        maxOwnPieces = potentialWinInfo.count;
                     }
                 }
             }
         }
         if (onlyExisting) return maxOwnPieces >= WIN_LENGTH - 1 ? true : null;
         return bestThreatMove;
     }

     // --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ (r, c) –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –ø–æ–±–µ–¥—ã ---
     function createsPotentialWin(r, c, player, checkExistingOnly = false) {
         const directions = [ { dr: 0, dc: 1 }, { dr: 1, dc: 0 }, { dr: 1, dc: 1 }, { dr: 1, dc: -1 } ];
         let bestPotential = null;

         for (const { dr, dc } of directions) {
             let count = 1;
             let openEnds = 0;

             // –í–ø–µ—Ä–µ–¥
             for (let i = 1; i < WIN_LENGTH; i++) {
                 const nr = r + i * dr; const nc = c + i * dc;
                 if (nr < 0 || nr >= ROWS || nc < 0 || nc >= COLS) break;
                 const nKey = `${nr}-${nc}`; const nCellElem = getCellElement(nr, nc);
                 if (board[nr][nc] === player) count++;
                 else if (board[nr][nc] === EMPTY && !bombLocations.has(nKey) && (!nCellElem || !nCellElem.classList.contains('bomb-revealed'))) { openEnds++; break; }
                 else break;
             }
             // –ù–∞–∑–∞–¥
             for (let i = 1; i < WIN_LENGTH; i++) {
                const nr = r - i * dr; const nc = c - i * dc;
                if (nr < 0 || nr >= ROWS || nc < 0 || nc >= COLS) break;
                const nKey = `${nr}-${nc}`; const nCellElem = getCellElement(nr, nc);
                if (board[nr][nc] === player) count++;
                else if (board[nr][nc] === EMPTY && !bombLocations.has(nKey) && (!nCellElem || !nCellElem.classList.contains('bomb-revealed'))) { openEnds++; break; }
                else break;
            }

             if ((count === WIN_LENGTH - 1 && openEnds >= 1) || (count === WIN_LENGTH - 2 && openEnds >= 2)) {
                 if (!bestPotential || count > bestPotential.count) {
                    bestPotential = { count, openEnds };
                 }
             }
              if (checkExistingOnly && bestPotential) return bestPotential;
         }
         return bestPotential;
     }

    // --- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ ---
    function calculateStrategicScore(r, c) {
        let score = 0;
        const centerR = (ROWS - 1) / 2.0;
        const centerC = (COLS - 1) / 2.0;
        score -= (Math.abs(r - centerR) + Math.abs(c - centerC)) * 0.5; // –¶–µ–Ω—Ç—Ä

        // –û—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑—ã/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
        board[r][c] = BOT;
        const botThreatInfo = createsPotentialWin(r, c, BOT);
        if (botThreatInfo) {
            if (botThreatInfo.count === WIN_LENGTH - 1) score += 50;
            if (botThreatInfo.count === WIN_LENGTH - 2 && botThreatInfo.openEnds >= 2) score += 25;
        }
        board[r][c] = PLAYER;
        const playerThreatInfo = createsPotentialWin(r, c, PLAYER);
         if (playerThreatInfo) {
             if (playerThreatInfo.count === WIN_LENGTH - 1) score += 40;
             if (playerThreatInfo.count === WIN_LENGTH - 2 && playerThreatInfo.openEnds >= 2) score += 20;
         }
        board[r][c] = EMPTY; // –í–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ—Ç—É

        // –°–æ—Å–µ–¥–∏
        for (let dr = -1; dr <= 1; dr++) {
            for (let dc = -1; dc <= 1; dc++) {
                if (dr === 0 && dc === 0) continue;
                const nr = r + dr; const nc = c + dc;
                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    if (board[nr][nc] === BOT) score += 2;
                    else if (board[nr][nc] === PLAYER) score += 1;
                }
            }
        }
        return score;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª—è ---
    function checkWin(player) {
        const directions = [ { dr: 0, dc: 1 }, { dr: 1, dc: 0 }, { dr: 1, dc: 1 }, { dr: 1, dc: -1 } ];
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === player) {
                    for (const { dr, dc } of directions) {
                        const winningCells = [{ row: r, col: c }];
                        for (let i = 1; i < WIN_LENGTH; i++) {
                            const nr = r + i * dr; const nc = c + i * dc;
                            if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === player) {
                                winningCells.push({ row: nr, col: nc });
                            } else { break; }
                        }
                        if (winningCells.length === WIN_LENGTH) {
                            return { winner: player, winningCells: winningCells };
                        }
                    }
                }
            }
        }
        return null;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–∏—á—å–µ–π ---
    function checkDraw() {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const key = `${r}-${c}`;
                const cellElem = getCellElement(r,c);
                if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                    return false; // –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
                }
            }
        }
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π: —Ö–æ–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.");
        return true; // –•–æ–¥–æ–≤ –Ω–µ—Ç
    }

    // --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ò–≥—Ä—ã ---
    function endGame(winner, winningCells = []) {
        gameOver = true;
        isBotThinking = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        // boardElement?.classList.remove('thinking'); // <<< –£–î–ê–õ–ï–ù–û

        if (winner === 'draw') {
            updateStatusMessage('–ù–∏—á—å—è!');
        } else if (winner === PLAYER || winner === BOT) {
            updateStatusMessage(`–ü–æ–±–µ–¥–∏–ª ${winner === PLAYER ? '–ò–≥—Ä–æ–∫' : '–ë–æ—Ç'} (${winner})!`);
            if (winner === PLAYER) playerScore++;
            else botScore++;
            updateScoreDisplay();
            highlightWin(winningCells);
        }
        revealAllBombs();
        newGameButton.disabled = false;
    }

    // --- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –í—ã–∏–≥—Ä—ã—à–Ω–æ–π –õ–∏–Ω–∏–∏ ---
    function highlightWin(cells) {
        cells.forEach(({ row, col }) => {
            getCellElement(row, col)?.classList.add('win-cell');
        });
    }

    // --- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–æ–º–±—ã ---
    function revealAllBombs() {
        bombLocations.forEach(key => {
            const [r_str, c_str] = key.split('-');
            const r = parseInt(r_str); const c = parseInt(c_str);
            const cellElement = getCellElement(r, c);
            if (cellElement && !cellElement.classList.contains('bomb-revealed')) {
                cellElement.textContent = BOMB;
                cellElement.classList.add('bomb-revealed');
            }
        });
    }

     // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–∏–¥–∞ –Ø—á–µ–π–∫–∏ ---
     function updateCell(row, col, value) {
         const cellElement = getCellElement(row, col);
         if (cellElement) {
             const isRevealedBomb = cellElement.classList.contains('bomb-revealed');
             const isWinCell = cellElement.classList.contains('win-cell'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å –ø–æ–±–µ–¥—ã

             // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π, –∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –∏ data-*
             cellElement.className = 'cell';
             cellElement.textContent = '';
             cellElement.dataset.row = row;
             cellElement.dataset.col = col;

             if (isRevealedBomb) { // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥ –≤–∑–æ—Ä–≤–∞–Ω–Ω–æ–π –±–æ–º–±—ã
                 cellElement.classList.add('bomb-revealed');
                 cellElement.textContent = BOMB;
             }
             if (isWinCell) { // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–±–µ–¥—ã
                cellElement.classList.add('win-cell');
             }

             // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
             if (value === PLAYER) {
                 cellElement.classList.add('x');
                 cellElement.textContent = PLAYER;
             } else if (value === BOT) {
                 cellElement.classList.add('o');
                 cellElement.textContent = BOT;
             }
         }
     }

    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ —è—á–µ–π–∫–∏ ---
    function getCellElement(row, col) {
        if (!boardElement) return null;
        return boardElement.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—Ç–∞—Ç—É—Å–∞ ---
    function updateStatusMessage(message) {
        if (statusMessageElement) {
            statusMessageElement.textContent = message;
        }
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—á–µ—Ç–∞ ---
    function updateScoreDisplay() {
        if (playerScoreElement && botScoreElement) {
            playerScoreElement.textContent = playerScore;
            botScoreElement.textContent = botScore;
        }
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª—å –ö–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ò–≥—Ä–∞" ---
    if (newGameButton) {
        newGameButton.addEventListener('click', initializeGame);
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∞—è –∏–≥—Ä–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // --- –ü–µ—Ä–≤—ã–π –ó–∞–ø—É—Å–∫ ---
    initializeGame();

    // --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram ---
    // try {
    //     if (window.Telegram && window.Telegram.WebApp) {
    //         window.Telegram.WebApp.ready();
    //         console.log("Telegram WebApp SDK initialized");
    //     }
    // } catch (e) { console.error("Telegram WebApp SDK error:", e); }

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded
