document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    const ROWS = 8;          // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const COLS = 6;          // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const WIN_LENGTH = 4;    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const BOMB_COUNT = 8;    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –¥–ª—è –ø–æ–ª—è 8x6 (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    const PLAYER = 'X';
    const BOT = 'O';
    const BOMB = 'üí£';
    const EMPTY = '';

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const boardElement = document.getElementById('game-board');
    const statusMessageElement = document.getElementById('status-message');
    const playerScoreElement = document.getElementById('player-score');
    const botScoreElement = document.getElementById('bot-score');
    const newGameButton = document.getElementById('new-game-button');

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
    let board = []; // 2D –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è
    let bombLocations = new Set(); // –•—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–æ–º–± ('row-col')
    let currentPlayer = PLAYER;
    let gameOver = false;
    let playerScore = 0;
    let botScore = 0;
    let isBotThinking = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –Ω–µ –∫–ª–∏–∫–∞–ª –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –±–æ—Ç–∞

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–≥—Ä—ã ---
    function initializeGame() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if (!boardElement || !statusMessageElement || !playerScoreElement || !botScoreElement || !newGameButton) {
            console.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã!");
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }

        board = Array(ROWS).fill(null).map(() => Array(COLS).fill(EMPTY));
        bombLocations.clear();
        gameOver = false;
        isBotThinking = false;
        currentPlayer = PLAYER; // –ò–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–º

        placeBombs();
        renderBoard();
        updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
        updateScoreDisplay();
        newGameButton.disabled = true; // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        console.log("–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (8x6). –ë–æ–º–±—ã:", Array.from(bombLocations)); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    // --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–æ–º–± ---
    function placeBombs() {
        let bombsPlaced = 0;
        if (BOMB_COUNT >= ROWS * COLS) {
            console.warn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ –¥–ª—è –ø–æ–ª—è!");
            // –ú–æ–∂–Ω–æ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å BOMB_COUNT, –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ –±–æ–º–±–∞–º–∏
            // –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            while (bombsPlaced < ROWS * COLS - 1) { // –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–µ-–±–æ–º–±—É
                 const row = Math.floor(Math.random() * ROWS);
                 const col = Math.floor(Math.random() * COLS);
                 const key = `${row}-${col}`;
                 if (!bombLocations.has(key)) {
                     bombLocations.add(key);
                     bombsPlaced++;
                 }
            }
            return;
        }

        while (bombsPlaced < BOMB_COUNT) {
            const row = Math.floor(Math.random() * ROWS);
            const col = Math.floor(Math.random() * COLS);
            const key = `${row}-${col}`;
            if (!bombLocations.has(key)) {
                bombLocations.add(key);
                bombsPlaced++;
            }
        }
    }

    // --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ü–æ–ª—è ---
    function renderBoard() {
        boardElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ CSS Grid
        boardElement.style.gridTemplateColumns = `repeat(${COLS}, var(--cell-size))`;
        // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è --cell-size (–º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å grid-auto-rows)

        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = r;
                cell.dataset.col = c;

                const cellValue = board[r][c];
                if (cellValue === PLAYER) {
                    cell.classList.add('x');
                    cell.textContent = PLAYER;
                } else if (cellValue === BOT) {
                    cell.classList.add('o');
                    cell.textContent = BOT;
                }
                // –ë–æ–º–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ –∫–ª–∏–∫–∞

                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ renderBoard –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å–Ω–æ–≤–∞)
                cell.removeEventListener('click', handleCellClick);
                cell.addEventListener('click', handleCellClick);

                boardElement.appendChild(cell);
            }
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–ª–∏–∫–∞ –ø–æ –Ø—á–µ–π–∫–µ ---
    function handleCellClick(event) {
        if (gameOver || isBotThinking || currentPlayer !== PLAYER) return;

        const cell = event.target;
        // –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –∏–º–µ–Ω–Ω–æ –ø–æ —è—á–µ–π–∫–µ
        if (!cell.classList.contains('cell')) return;

        const row = parseInt(cell.dataset.row);
        const col = parseInt(cell.dataset.col);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if (isNaN(row) || isNaN(col) || row < 0 || row >= ROWS || col < 0 || col >= COLS) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏:", cell.dataset);
            return;
        }

        const bombKey = `${row}-${col}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ–π (–∫—Ä–æ–º–µ —Å–∫—Ä—ã—Ç—ã—Ö –±–æ–º–±)
        if (board[row][col] !== EMPTY) return;

        if (bombLocations.has(bombKey)) {
            triggerBomb(row, col, PLAYER);
             if (!gameOver) {
                 // –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –±–æ—Ç—É –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
                 switchPlayer();
                 // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –±–æ—Ç–∞
                 setTimeout(botMove, 600);
             }
        } else {
            // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            makeMove(row, col, PLAYER);
            // –•–æ–¥ –±–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ makeMove, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
        }
    }

     // --- –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –•–æ–¥–∞ (–±–µ–∑ –±–æ–º–±) ---
     function makeMove(row, col, player) {
        if (gameOver || board[row][col] !== EMPTY) return false;

        board[row][col] = player;
        updateCell(row, col, player);

        const winInfo = checkWin(player);
        if (winInfo) {
            endGame(player, winInfo.winningCells);
        } else if (checkDraw()) {
            endGame('draw');
        } else {
            switchPlayer();
            if (player === PLAYER && !gameOver) { // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É
                 isBotThinking = true;
                 updateStatusMessage('–ë–æ—Ç –¥—É–º–∞–µ—Ç...');
                 setTimeout(botMove, Math.random() * 500 + 300); // 300-800ms
             } else if (player === BOT && !gameOver) { // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ–¥ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞
                 updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
             }
        }
        return true; // –•–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω
    }


    // --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ë–æ–º–±—ã ---
    function triggerBomb(row, col, triggerPlayer) {
        console.log(`–ë–æ–º–±–∞ –≤–∑–æ—Ä–≤–∞–Ω–∞ –≤ ${row}-${col} –∏–≥—Ä–æ–∫–æ–º ${triggerPlayer}`);
        const bombCell = getCellElement(row, col);
        if (bombCell) {
             bombCell.textContent = BOMB;
             bombCell.classList.add('bomb-revealed'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–º–±—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
             bombCell.classList.add('exploded'); // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–∑—Ä—ã–≤–∞
             // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'exploded' –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º bomb-revealed
            setTimeout(() => {
                bombCell?.classList.remove('exploded');
            }, 500);
        }

        // –£–¥–∞–ª—è–µ–º –±–æ–º–±—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∞ –Ω–µ–µ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å —Å–Ω–æ–≤–∞
        // –∏–ª–∏ —á—Ç–æ–±—ã –±–æ—Ç –µ–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª
        bombLocations.delete(`${row}-${col}`);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –≤ EMPTY, —á—Ç–æ–±—ã –µ–µ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ "–ø—É—Å—Ç–æ–π"
        // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —á—Ç–æ–±—ã —è—á–µ–π–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–æ–π, –ù–ï —Å—Ç–∞–≤–∏–º EMPTY
        // board[row][col] = 'exploded_bomb'; // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä
        // –û—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞ EMPTY, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
        board[row][col] = EMPTY; // –°—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –∫–ª–∏–∫–∞ –∏–∑-–∑–∞ .bomb-revealed

        // –û—á–∏—â–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏ (—Ç–æ–ª—å–∫–æ X –∏ O)
        for (let rOffset = -1; rOffset <= 1; rOffset++) {
            for (let cOffset = -1; cOffset <= 1; cOffset++) {
                if (rOffset === 0 && cOffset === 0) continue;

                const nr = row + rOffset;
                const nc = col + cOffset;

                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    const neighborKey = `${nr}-${nc}`;
                    // –°—Ç–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ X –∏ O, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –¥—Ä—É–≥–∏–µ –±–æ–º–±—ã –∏ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
                    if (board[nr][nc] === PLAYER || board[nr][nc] === BOT) {
                         console.log(`–û—á–∏—â–µ–Ω–∞ —è—á–µ–π–∫–∞ ${nr}-${nc} –≤–∑—Ä—ã–≤–æ–º`);
                         board[nr][nc] = EMPTY;
                         updateCell(nr, nc, EMPTY);
                         // –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—Å—Ç–∫–∏
                         const clearedCell = getCellElement(nr, nc);
                         clearedCell?.classList.add('exploded'); // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
                         setTimeout(() => clearedCell?.classList.remove('exploded'), 500);
                    }
                }
            }
        }

        updateStatusMessage(`üí• –ë—É–º! ${triggerPlayer === PLAYER ? '–ò–≥—Ä–æ–∫' : '–ë–æ—Ç'} (${triggerPlayer}) –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É!`);
        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (handleCellClick –∏–ª–∏ botMove)
    }


    // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ ---
    function switchPlayer() {
         if (gameOver) return;
        currentPlayer = (currentPlayer === PLAYER) ? BOT : PLAYER;
        // –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ makeMove –∏–ª–∏ botMove –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
    }

    // --- –•–æ–¥ –ë–æ—Ç–∞ ---
    function botMove() {
         if (gameOver || currentPlayer !== BOT) {
             isBotThinking = false;
             return;
         }

         updateStatusMessage('–ë–æ—Ç —Ö–æ–¥–∏—Ç...'); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Ö–æ–¥–∞

         // --- –õ–æ–≥–∏–∫–∞ –ò–ò –ë–æ—Ç–∞ ---
         let bestMove = findBestMove();

         if (bestMove) {
             const { row, col } = bestMove;
             const bombKey = `${row}-${col}`;

             if (bombLocations.has(bombKey)) {
                 triggerBomb(row, col, BOT);
                 // –•–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫—É
                 if (!gameOver) {
                    switchPlayer(); // –í–µ—Ä–Ω—É–ª–∏ —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
                    updateStatusMessage(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (${PLAYER})`);
                 }
             } else {
                 // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –±–æ—Ç–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç switchPlayer –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω—É—Ç—Ä–∏
                makeMove(row, col, BOT);
             }
         } else {
             console.error("–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ö–æ–¥! –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∏—á—å—è –∏–ª–∏ –æ—à–∏–±–∫–∞.");
             if (!checkDraw() && !gameOver) { // –ï—Å–ª–∏ –Ω–µ –Ω–∏—á—å—è –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                endGame('draw'); // –§–æ—Ä—Å–∏—Ä—É–µ–º –Ω–∏—á—å—é –≤ —ç—Ç–æ–º —Å—Ç—Ä–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ
             }
         }
         isBotThinking = false; // –ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
    }

    // --- –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –ë–æ—Ç–∞ (–£–º–Ω—ã–π, –Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) ---
    function findBestMove() {
        // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º
        let move = findWinningMove(BOT);
        if (move) return move;

        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        move = findWinningMove(PLAYER);
        if (move) return move;

        // 3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å —É–≥—Ä–æ–∑—É (WIN_LENGTH - 1 –≤ —Ä—è–¥)
        move = findThreatMove(BOT);
        if (move) return move;

        // 4. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–≥—Ä–æ–∑—É –∏–≥—Ä–æ–∫–∞
        //    (–í–∞–∂–Ω–æ: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–≤–æ–µ–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —É–≥—Ä–æ–∑—ã)
        move = findThreatMove(PLAYER);
        if (move) {
             let botThreat = findThreatMove(BOT, true); // –ò—â–µ–º —Å–≤–æ—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É
             if(!botThreat) return move; // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—É—á—à–µ
        }

        // 5. –ó–∞–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é
        let possibleMoves = [];
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === EMPTY && !bombLocations.has(`${r}-${c}`)) {
                    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –±–æ–º–±—ã
                    const cellElem = getCellElement(r, c);
                    if (!cellElem || !cellElem.classList.contains('bomb-revealed')) {
                        possibleMoves.push({ row: r, col: c, score: calculateStrategicScore(r, c) });
                    }
                }
            }
        }

         // –ï—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ö–æ–¥–æ–≤ –Ω–µ—Ç, –±–æ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –±–æ–º–±—É
         if (possibleMoves.length === 0) {
             let bombCells = [];
             // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–º–∏ –±–æ–º–±–∞–º–∏
             for(const key of bombLocations) {
                 const [r_str, c_str] = key.split('-');
                 const r = parseInt(r_str);
                 const c = parseInt(c_str);
                 // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —è—á–µ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞ –Ω–∞ –¥–æ—Å–∫–µ (–Ω–µ X –∏–ª–∏ O)
                 if(board[r][c] === EMPTY) {
                    bombCells.push({ row: r, col: c });
                 }
             }

             if (bombCells.length > 0) {
                 console.log("–ë–æ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –±–æ–º–±—É.");
                 return bombCells[Math.floor(Math.random() * bombCells.length)];
             } else {
                 // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ checkDraw —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                 console.error("–ù–µ—Ç –Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ö–æ–¥–æ–≤, –Ω–∏ –±–æ–º–± –¥–ª—è –±–æ—Ç–∞. –ù–∏—á—å—è?");
                 return null;
             }
         }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–µ (–≤—ã—à–µ - –ª—É—á—à–µ)
        possibleMoves.sort((a, b) => b.score - a.score);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, –≤—ã–±–∏—Ä–∞—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—É—á—à–∏—Ö
        const topN = Math.min(possibleMoves.length, 3); // –ë–µ—Ä–µ–º –¥–æ 3 –ª—É—á—à–∏—Ö
        const randomIndex = Math.floor(Math.random() * topN);
        return possibleMoves[randomIndex];
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ/–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ö–æ–¥–∞ ---
    function findWinningMove(player) {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                 const key = `${r}-${c}`;
                 const cellElem = getCellElement(r, c);
                 // –ò—â–µ–º –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä—ã—Ç–æ–π –∏–ª–∏ –≤–∑–æ—Ä–≤–∞–Ω–Ω–æ–π –±–æ–º–±–æ–π
                 if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                    board[r][c] = player; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
                    if (checkWin(player)) {
                        board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                        return { row: r, col: c };
                    }
                    board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                }
            }
        }
        return null; // –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Ö–æ–¥–∞
    }

     // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–æ–¥–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ —É–≥—Ä–æ–∑—É (WIN_LENGTH - 1) ---
     function findThreatMove(player, onlyExisting = false) {
        let bestThreatMove = null;
        let maxOwnPieces = -1; // –î–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π —É–≥—Ä–æ–∑—ã (–≥–¥–µ –±–æ–ª—å—à–µ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä —É–∂–µ —Å—Ç–æ–∏—Ç)

         for (let r = 0; r < ROWS; r++) {
             for (let c = 0; c < COLS; c++) {
                  const key = `${r}-${c}`;
                  const cellElem = getCellElement(r, c);
                  // –ò—â–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É, –Ω–µ –±–æ–º–±—É (—Å–∫—Ä—ã—Ç—É—é –∏–ª–∏ –≤–∑–æ—Ä–≤–∞–Ω–Ω—É—é)
                 if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                     if (onlyExisting) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ, –µ—Å–ª–∏ –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≥—Ä–æ–∑—ã

                     board[r][c] = player; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
                     const potentialWinInfo = createsPotentialWin(r, c, player);
                     if (potentialWinInfo && potentialWinInfo.count > maxOwnPieces) {
                         // –ù–∞—à–ª–∏ —Ö–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π —É–≥—Ä–æ–∑—É. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —É–≥—Ä–æ–∑—ã —Å –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä.
                         maxOwnPieces = potentialWinInfo.count;
                         bestThreatMove = { row: r, col: c };
                     }
                     board[r][c] = EMPTY; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
                 }
                 // –ï—Å–ª–∏ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫–∏ —Å —Ñ–∏–≥—É—Ä–∞–º–∏ 'player'
                 else if (onlyExisting && board[r][c] === player) {
                     const potentialWinInfo = createsPotentialWin(r, c, player, true); // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ª–∏–Ω–∏—é –æ—Ç —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã
                     if (potentialWinInfo && potentialWinInfo.count > maxOwnPieces) {
                        // –ù–∞—à–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –µ—Å—Ç—å.
                        // –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –±—É–¥–µ–º –Ω–µ —ç—Ç—É —è—á–µ–π–∫—É, –∞ –ø—Ä–æ—Å—Ç–æ —Ñ–∞–∫—Ç –Ω–∞–ª–∏—á–∏—è.
                        // –í `findBestMove` –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ —É–≥—Ä–æ–∑–∞ –ï–°–¢–¨.
                        maxOwnPieces = potentialWinInfo.count;
                        // bestThreatMove –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–µ–Ω —Ö–æ–¥ –≤ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
                     }
                 }
             }
         }
          // –ï—Å–ª–∏ –∏—Å–∫–∞–ª–∏ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–≥—Ä–æ–∑—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true/false (–∏–ª–∏ –∫–æ–ª-–≤–æ —Ñ–∏–≥—É—Ä)
         if (onlyExisting) return maxOwnPieces >= WIN_LENGTH - 1 ? true : null;
         // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ö–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≥—Ä–æ–∑—ã
         return bestThreatMove;
     }

     // --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ (r, c) –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –ø–æ–±–µ–¥—ã ---
     // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { count: —á–∏—Å–ª–æ_—Ñ–∏–≥—É—Ä_–≤_–ª–∏–Ω–∏–∏, openEnds: —á–∏—Å–ª–æ_–æ—Ç–∫—Ä—ã—Ç—ã—Ö_–∫–æ–Ω—Ü–æ–≤ } –∏–ª–∏ null
     function createsPotentialWin(r, c, player, checkExistingOnly = false) {
         const directions = [
             { dr: 0, dc: 1 }, { dr: 1, dc: 0 }, { dr: 1, dc: 1 }, { dr: 1, dc: -1 }
         ];
         let bestPotential = null;

         for (const { dr, dc } of directions) {
             let count = 1; // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É (–∏–ª–∏ —Ç—É, —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ)
             let openEnds = 0;
             let lineCells = [{r,c}]; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫ –≤ –ª–∏–Ω–∏–∏

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
             for (let i = 1; i < WIN_LENGTH; i++) {
                 const nr = r + i * dr;
                 const nc = c + i * dc;
                 if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                     const nKey = `${nr}-${nc}`;
                     const nCellElem = getCellElement(nr, nc);
                     if (board[nr][nc] === player) {
                         count++;
                         lineCells.push({r:nr, c:nc});
                     } else if (board[nr][nc] === EMPTY && !bombLocations.has(nKey) && (!nCellElem || !nCellElem.classList.contains('bomb-revealed'))) {
                         openEnds++;
                         break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ü–∞ —Å —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                     } else {
                         break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞
                     }
                 } else {
                     break; // –ì—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—è
                 }
             }

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
             for (let i = 1; i < WIN_LENGTH; i++) {
                 const nr = r - i * dr;
                 const nc = c - i * dc;
                  if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                     const nKey = `${nr}-${nc}`;
                     const nCellElem = getCellElement(nr, nc);
                     if (board[nr][nc] === player) {
                         count++;
                          lineCells.push({r:nr, c:nc});
                     } else if (board[nr][nc] === EMPTY && !bombLocations.has(nKey) && (!nCellElem || !nCellElem.classList.contains('bomb-revealed'))) {
                         openEnds++;
                         break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ü–∞ —Å —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                     } else {
                         break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞
                     }
                  } else {
                       break; // –ì—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—è
                  }
             }

            // –°—á–∏—Ç–∞–µ—Ç—Å—è —É–≥—Ä–æ–∑–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å WIN_LENGTH - 1 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä –ò —Ö–æ—Ç—è –±—ã 1 –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–µ—Ü
            // –ò–õ–ò –µ—Å–ª–∏ –µ—Å—Ç—å WIN_LENGTH - 2 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä –ò 2 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ü–∞ (–¥–≤–æ–π–Ω–∞—è —É–≥—Ä–æ–∑–∞)
            // –ò–õ–ò –µ—Å–ª–∏ –µ—Å—Ç—å WIN_LENGTH - 3 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä—ã –ò 2 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ü–∞ (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç–æ–∂–µ –ø–æ–ª–µ–∑–Ω–æ)
             if ((count === WIN_LENGTH - 1 && openEnds >= 1) || (count === WIN_LENGTH - 2 && openEnds >= 2)) {
                 // –ù–∞—à–ª–∏ —É–≥—Ä–æ–∑—É. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é (–≥–¥–µ –±–æ–ª—å—à–µ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä)
                 if (!bestPotential || count > bestPotential.count) {
                    bestPotential = { count, openEnds };
                 }
             }
              // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ, –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É–≥—Ä–æ–∑—É
              if (checkExistingOnly && bestPotential) return bestPotential;
         }
         return bestPotential; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–µ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —É–≥—Ä–æ–∑–µ (–∏–ª–∏ null)
     }


    // --- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ ---
    function calculateStrategicScore(r, c) {
        let score = 0;
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
        const centerR = (ROWS - 1) / 2.0;
        const centerC = (COLS - 1) / 2.0;
        // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–º
        score -= (Math.abs(r - centerR) + Math.abs(c - centerC)) * 0.5;

        // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–æ—Ç–∞)
        board[r][c] = BOT; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º
        const threatInfo = createsPotentialWin(r, c, BOT);
        if (threatInfo) {
            if (threatInfo.count === WIN_LENGTH - 1) score += 50; // –°–∏–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞
            if (threatInfo.count === WIN_LENGTH - 2 && threatInfo.openEnds >= 2) score += 25; // –î–≤–æ–π–Ω–∞—è —É–≥—Ä–æ–∑–∞
        }
        board[r][c] = EMPTY; // –£–±–∏—Ä–∞–µ–º

         // –ë–æ–Ω—É—Å –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –∏–≥—Ä–æ–∫–∞
        board[r][c] = PLAYER; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º –∑–∞ –∏–≥—Ä–æ–∫–∞
        const playerThreatInfo = createsPotentialWin(r, c, PLAYER);
         if (playerThreatInfo) {
             if (playerThreatInfo.count === WIN_LENGTH - 1) score += 40; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–∞–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã
             if (playerThreatInfo.count === WIN_LENGTH - 2 && playerThreatInfo.openEnds >= 2) score += 20; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–π —É–≥—Ä–æ–∑—ã
         }
        board[r][c] = EMPTY; // –£–±–∏—Ä–∞–µ–º

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–æ —Å–æ —Å–≤–æ–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
        for (let dr = -1; dr <= 1; dr++) {
            for (let dc = -1; dc <= 1; dc++) {
                if (dr === 0 && dc === 0) continue;
                const nr = r + dr;
                const nc = c + dc;
                if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                    if (board[nr][nc] === BOT) score += 2; // –ë–æ–Ω—É—Å –∑–∞ —Å–æ—Å–µ–¥–∞-–±–æ—Ç–∞
                    else if (board[nr][nc] === PLAYER) score += 1; // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ —Å–æ—Å–µ–¥–∞-–∏–≥—Ä–æ–∫–∞ (—Ä—è–¥–æ–º —Å –Ω–∏–º —á–∞—Å—Ç–æ –≤—ã–≥–æ–¥–Ω–æ —Å—Ç–∞–≤–∏—Ç—å)
                }
            }
        }
        return score;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª—è ---
    function checkWin(player) {
        const directions = [
            { dr: 0, dc: 1 }, // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
            { dr: 1, dc: 0 }, // –í–µ—Ä—Ç–∏–∫–∞–ª—å
            { dr: 1, dc: 1 }, // –î–∏–∞–≥–æ–Ω–∞–ª—å \
            { dr: 1, dc: -1 } // –î–∏–∞–≥–æ–Ω–∞–ª—å /
        ];

        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                if (board[r][c] === player) {
                    for (const { dr, dc } of directions) {
                        const winningCells = [{ row: r, col: c }];
                        for (let i = 1; i < WIN_LENGTH; i++) {
                            const nr = r + i * dr;
                            const nc = c + i * dc;
                            if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS && board[nr][nc] === player) {
                                winningCells.push({ row: nr, col: nc });
                            } else {
                                break;
                            }
                        }
                        if (winningCells.length === WIN_LENGTH) {
                            return { winner: player, winningCells: winningCells };
                        }
                    }
                }
            }
        }
        return null; // –ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–∏—á—å–µ–π ---
    function checkDraw() {
        for (let r = 0; r < ROWS; r++) {
            for (let c = 0; c < COLS; c++) {
                const key = `${r}-${c}`;
                const cellElem = getCellElement(r,c);
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä—ã—Ç–æ–π –ò–õ–ò –≤–∑–æ—Ä–≤–∞–Ω–Ω–æ–π –±–æ–º–±–æ–π
                if (board[r][c] === EMPTY && !bombLocations.has(key) && (!cellElem || !cellElem.classList.contains('bomb-revealed'))) {
                    return false; // –ï—Å—Ç—å –µ—â–µ —Ö–æ–¥—ã
                }
            }
        }
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –≤—Å–µ –Ω–µ-–±–æ–º–±–æ–≤—ã–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã, –∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π: —Ö–æ–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.");
        return true;
    }

    // --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ò–≥—Ä—ã ---
    function endGame(winner, winningCells = []) {
        gameOver = true;
        isBotThinking = false;

        if (winner === 'draw') {
            updateStatusMessage('–ù–∏—á—å—è!');
        } else if (winner === PLAYER || winner === BOT) {
            updateStatusMessage(`–ü–æ–±–µ–¥–∏–ª ${winner === PLAYER ? '–ò–≥—Ä–æ–∫' : '–ë–æ—Ç'} (${winner})!`);
            if (winner === PLAYER) playerScore++;
            else botScore++;
            updateScoreDisplay();
            highlightWin(winningCells);
        }

        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–æ–º–±—ã –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã
        revealAllBombs();

        newGameButton.disabled = false;
    }

    // --- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –í—ã–∏–≥—Ä—ã—à–Ω–æ–π –õ–∏–Ω–∏–∏ ---
    function highlightWin(cells) {
        cells.forEach(({ row, col }) => {
            const cellElement = getCellElement(row, col);
            cellElement?.classList.add('win-cell');
        });
    }

    // --- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–æ–º–±—ã ---
    function revealAllBombs() {
        bombLocations.forEach(key => {
            const [r_str, c_str] = key.split('-');
            const r = parseInt(r_str);
            const c = parseInt(c_str);
            const cellElement = getCellElement(r, c);
            if (cellElement && !cellElement.classList.contains('bomb-revealed')) {
                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤–∑–æ—Ä–≤–∞–Ω–∞
                cellElement.textContent = BOMB;
                cellElement.classList.add('bomb-revealed');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å –¥–ª—è "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π" –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –±–æ–º–±—ã
                // cellElement.style.opacity = '0.6';
            }
        });
    }

     // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–∏–¥–∞ –Ø—á–µ–π–∫–∏ ---
     function updateCell(row, col, value) {
         const cellElement = getCellElement(row, col);
         if (cellElement) {
             // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å–∏–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∫—Ä–æ–º–µ –±–∞–∑–æ–≤–æ–≥–æ 'cell' –∏ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
             const isRevealedBomb = cellElement.classList.contains('bomb-revealed');
             cellElement.className = 'cell'; // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Å—ã
             cellElement.textContent = '';
             // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–µ—Ç–µ–ª–∏ (–Ω–µ –¥–æ–ª–∂–Ω—ã)
             cellElement.dataset.row = row;
             cellElement.dataset.col = col;
              // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –≤–∑–æ—Ä–≤–∞–Ω–Ω–∞—è –±–æ–º–±–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –∫–ª–∞—Å—Å
             if (isRevealedBomb) {
                 cellElement.classList.add('bomb-revealed');
                 cellElement.textContent = BOMB; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É
             }


             if (value === PLAYER) {
                 cellElement.classList.add('x');
                 cellElement.textContent = PLAYER;
             } else if (value === BOT) {
                 cellElement.classList.add('o');
                 cellElement.textContent = BOT;
             }
             // –î–ª—è EMPTY –∏ BOMB (—Å–∫—Ä—ã—Ç—ã—Ö) –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
             // –í–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –±–æ–º–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ triggerBomb –∏ updateCell
         }
     }

    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ —è—á–µ–π–∫–∏ ---
    function getCellElement(row, col) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ boardElement —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!boardElement) return null;
        return boardElement.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—Ç–∞—Ç—É—Å–∞ ---
    function updateStatusMessage(message) {
        if (statusMessageElement) {
            statusMessageElement.textContent = message;
        }
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—á–µ—Ç–∞ ---
    function updateScoreDisplay() {
        if (playerScoreElement && botScoreElement) {
            playerScoreElement.textContent = playerScore;
            botScoreElement.textContent = botScore;
        }
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª—å –ö–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ò–≥—Ä–∞" ---
    if (newGameButton) {
        newGameButton.addEventListener('click', initializeGame);
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∞—è –∏–≥—Ä–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // --- –ü–µ—Ä–≤—ã–π –ó–∞–ø—É—Å–∫ ---
    // –í—ã–∑—ã–≤–∞–µ–º initializeGame —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    initializeGame();

    // --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram ---
    // try {
    //     if (window.Telegram && window.Telegram.WebApp) {
    //         window.Telegram.WebApp.ready();
    //         console.log("Telegram WebApp SDK initialized");
    //         // window.Telegram.WebApp.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É").show().onClick(() => window.Telegram.WebApp.close());
    //     }
    // } catch (e) {
    //     console.error("Telegram WebApp SDK error:", e);
    // }

}); // –ö–æ–Ω–µ—Ü document.addEventListener('DOMContentLoaded', ... )
